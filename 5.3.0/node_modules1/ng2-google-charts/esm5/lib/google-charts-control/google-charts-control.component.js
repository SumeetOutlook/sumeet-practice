import { __awaiter, __decorate, __generator } from "tslib";
import { Component, OnInit, Input, ElementRef } from '@angular/core';
import { GoogleChartsLoaderService } from '../google-charts-loader.service';
var GoogleChartsControlComponent = /** @class */ (function () {
    function GoogleChartsControlComponent(el, loaderService) {
        this.el = el;
        this.loaderService = loaderService;
    }
    GoogleChartsControlComponent.prototype.ngOnInit = function () {
        this.data.component = this;
    };
    GoogleChartsControlComponent.prototype.ensureInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var opt;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.wrapper) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.loaderService.load({ packages: ['controls'] })];
                    case 1:
                        _a.sent();
                        opt = Object.create(this.data);
                        opt.containerId = this.el.nativeElement.querySelector('div');
                        this.wrapper = new google.visualization.ControlWrapper(opt);
                        return [2 /*return*/];
                }
            });
        });
    };
    GoogleChartsControlComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: GoogleChartsLoaderService }
    ]; };
    __decorate([
        Input()
    ], GoogleChartsControlComponent.prototype, "data", void 0);
    GoogleChartsControlComponent = __decorate([
        Component({
            selector: 'google-charts-control',
            template: '<div></div>'
        })
    ], GoogleChartsControlComponent);
    return GoogleChartsControlComponent;
}());
export { GoogleChartsControlComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy1jb250cm9sLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nMi1nb29nbGUtY2hhcnRzLyIsInNvdXJjZXMiOlsibGliL2dvb2dsZS1jaGFydHMtY29udHJvbC9nb29nbGUtY2hhcnRzLWNvbnRyb2wuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFTQSxPQUFPLEVBQ0wsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQ3hCLFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQVM1RTtJQVFFLHNDQUFtQixFQUFjLEVBQ2QsYUFBd0M7UUFDekQsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUNyQyxDQUFDO0lBRUQsK0NBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUM3QixDQUFDO0lBRVksaURBQVUsR0FBdkI7Ozs7Ozt3QkFDRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7NEJBQ2hCLHNCQUFPO3lCQUNSO3dCQUNELHFCQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFBOzt3QkFBeEQsU0FBd0QsQ0FBQzt3QkFFekQsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUMvQixHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDN0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7OztLQUM3RDs7Z0JBbkJzQixVQUFVO2dCQUNDLHlCQUF5Qjs7SUFQbEQ7UUFBUixLQUFLLEVBQUU7OERBQTJDO0lBRnhDLDRCQUE0QjtRQUp4QyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLFFBQVEsRUFBRSxhQUFhO1NBQ3hCLENBQUM7T0FDVyw0QkFBNEIsQ0E0QnhDO0lBQUQsbUNBQUM7Q0FBQSxBQTVCRCxJQTRCQztTQTVCWSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJkZWNsYXJlIHZhciBnb29nbGU6IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBHb29nbGVDaGFydHNDb250cm9sSW50ZXJmYWNlIHtcbiAgY29udHJvbFR5cGU6IHN0cmluZztcbiAgb3B0aW9ucz86IG9iamVjdDtcbiAgc3RhdGU/OiBvYmplY3Q7XG4gIGNvbXBvbmVudD86IEdvb2dsZUNoYXJ0c0NvbnRyb2xDb21wb25lbnQ7XG59XG5cbmltcG9ydCB7XG4gIENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCxcbiAgRWxlbWVudFJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgR29vZ2xlQ2hhcnRzTG9hZGVyU2VydmljZSB9IGZyb20gJy4uL2dvb2dsZS1jaGFydHMtbG9hZGVyLnNlcnZpY2UnO1xuXG5pbnRlcmZhY2UgSW50ZXJuYWxHb29nbGVDaGFydHNDb250cm9sT3B0aW9ucyBleHRlbmRzIEdvb2dsZUNoYXJ0c0NvbnRyb2xJbnRlcmZhY2Uge1xuICBjb250YWluZXJJZDogc3RyaW5nO1xufVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZ29vZ2xlLWNoYXJ0cy1jb250cm9sJyxcbiAgdGVtcGxhdGU6ICc8ZGl2PjwvZGl2PicsXG59KVxuZXhwb3J0IGNsYXNzIEdvb2dsZUNoYXJ0c0NvbnRyb2xDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBkYXRhOiBHb29nbGVDaGFydHNDb250cm9sSW50ZXJmYWNlO1xuXG4gIHByaXZhdGUgZWw6IEVsZW1lbnRSZWY7XG4gIHByaXZhdGUgbG9hZGVyU2VydmljZTogR29vZ2xlQ2hhcnRzTG9hZGVyU2VydmljZTtcbiAgcHVibGljIHdyYXBwZXI6IGFueTtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgICAgICBsb2FkZXJTZXJ2aWNlOiBHb29nbGVDaGFydHNMb2FkZXJTZXJ2aWNlKSB7XG4gICAgdGhpcy5lbCA9IGVsO1xuICAgIHRoaXMubG9hZGVyU2VydmljZSA9IGxvYWRlclNlcnZpY2U7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmRhdGEuY29tcG9uZW50ID0gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBlbnN1cmVJbml0KCkge1xuICAgIGlmICh0aGlzLndyYXBwZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5sb2FkZXJTZXJ2aWNlLmxvYWQoe3BhY2thZ2VzOiBbJ2NvbnRyb2xzJ10gfSk7XG4gICAgbGV0IG9wdDogSW50ZXJuYWxHb29nbGVDaGFydHNDb250cm9sT3B0aW9ucztcbiAgICBvcHQgPSBPYmplY3QuY3JlYXRlKHRoaXMuZGF0YSk7XG4gICAgb3B0LmNvbnRhaW5lcklkID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2RpdicpO1xuICAgIHRoaXMud3JhcHBlciA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5Db250cm9sV3JhcHBlcihvcHQpO1xuICB9XG59XG4iXX0=