import { __awaiter, __decorate, __generator, __param } from "tslib";
import { Injectable, EventEmitter, LOCALE_ID, Inject, Optional } from '@angular/core';
import * as i0 from "@angular/core";
var GoogleChartsLoaderService = /** @class */ (function () {
    function GoogleChartsLoaderService(localeId, googleChartsSettings) {
        var _this = this;
        this.googleChartsSettings = googleChartsSettings;
        this.googleScriptLoadingNotifier = new EventEmitter();
        this.googleScriptIsLoading = false;
        this.localeId = localeId;
        this.loadGoogleChartsScriptPromise = new Promise(function (resolve, reject) {
            if (typeof google !== 'undefined' && google.charts) {
                resolve();
            }
            else if (!_this.googleScriptIsLoading) {
                _this.googleScriptIsLoading = true;
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://www.gstatic.com/charts/loader.js';
                script.async = true;
                script.defer = true;
                script.onload = function () {
                    _this.googleScriptIsLoading = false;
                    _this.googleScriptLoadingNotifier.emit(true);
                    resolve();
                };
                script.onerror = function () {
                    _this.googleScriptIsLoading = false;
                    _this.googleScriptLoadingNotifier.emit(false);
                    reject();
                };
                document.getElementsByTagName('head')[0].appendChild(script);
            }
            else {
                _this.googleScriptLoadingNotifier.subscribe(function (loaded) {
                    if (loaded) {
                        resolve();
                    }
                    else {
                        reject();
                    }
                });
            }
        });
    }
    GoogleChartsLoaderService.prototype.load = function (settings) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadGoogleChartsScriptPromise];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new Promise(function (resolve) {
                                if (!settings) {
                                    settings = Object.create(_this.googleChartsSettings);
                                }
                                if (!settings) {
                                    settings = {};
                                }
                                if (!settings.language) {
                                    settings.language = _this.localeId;
                                }
                                if (!settings.googleChartsVersion) {
                                    settings.googleChartsVersion = '47';
                                }
                                var _settings = settings;
                                _settings.callback = resolve;
                                google.charts.load(settings.googleChartsVersion, _settings);
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GoogleChartsLoaderService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: ['googleChartsSettings',] }, { type: Optional }] }
    ]; };
    GoogleChartsLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleChartsLoaderService_Factory() { return new GoogleChartsLoaderService(i0.ɵɵinject(i0.LOCALE_ID), i0.ɵɵinject("googleChartsSettings", 8)); }, token: GoogleChartsLoaderService, providedIn: "root" });
    GoogleChartsLoaderService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Inject(LOCALE_ID)),
        __param(1, Inject('googleChartsSettings')), __param(1, Optional())
    ], GoogleChartsLoaderService);
    return GoogleChartsLoaderService;
}());
export { GoogleChartsLoaderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy1sb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nMi1nb29nbGUtY2hhcnRzLyIsInNvdXJjZXMiOlsibGliL2dvb2dsZS1jaGFydHMtbG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQVV0RjtJQU9FLG1DQUNxQixRQUFnQixFQUNpQixvQkFBMkM7UUFGakcsaUJBMENDO1FBeENxRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXVCO1FBRS9GLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3RELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxLQUFLLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFFekIsSUFBSSxDQUFDLDZCQUE2QixHQUFHLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtnQkFDbEQsT0FBTyxFQUFFLENBQUM7YUFDWDtpQkFBTSxJQUFJLENBQUMsS0FBSSxDQUFDLHFCQUFxQixFQUFFO2dCQUV0QyxLQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO2dCQUVsQyxJQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNoRCxNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO2dCQUNoQyxNQUFNLENBQUMsR0FBRyxHQUFHLDBDQUEwQyxDQUFDO2dCQUN4RCxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztnQkFDcEIsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxNQUFNLEdBQUc7b0JBQ2QsS0FBSSxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQztvQkFDbkMsS0FBSSxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDNUMsT0FBTyxFQUFFLENBQUM7Z0JBQ1osQ0FBQyxDQUFDO2dCQUNGLE1BQU0sQ0FBQyxPQUFPLEdBQUc7b0JBQ2YsS0FBSSxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQztvQkFDbkMsS0FBSSxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDN0MsTUFBTSxFQUFFLENBQUM7Z0JBQ1gsQ0FBQyxDQUFDO2dCQUNGLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7YUFFOUQ7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLDJCQUEyQixDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQWU7b0JBQ3pELElBQUksTUFBTSxFQUFFO3dCQUNWLE9BQU8sRUFBRSxDQUFDO3FCQUNYO3lCQUFNO3dCQUNMLE1BQU0sRUFBRSxDQUFDO3FCQUNWO2dCQUNILENBQUMsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFWSx3Q0FBSSxHQUFqQixVQUFrQixRQUErQjs7Ozs7NEJBQy9DLHFCQUFNLElBQUksQ0FBQyw2QkFBNkIsRUFBQTs7d0JBQXhDLFNBQXdDLENBQUM7d0JBRXpDLHFCQUFNLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTztnQ0FDeEIsSUFBSSxDQUFDLFFBQVEsRUFBRTtvQ0FDYixRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztpQ0FDckQ7Z0NBQ0QsSUFBSSxDQUFDLFFBQVEsRUFBRTtvQ0FDYixRQUFRLEdBQUcsRUFBRSxDQUFDO2lDQUNmO2dDQUVELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO29DQUN0QixRQUFRLENBQUMsUUFBUSxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUM7aUNBQ25DO2dDQUVELElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUU7b0NBQ2pDLFFBQVEsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7aUNBQ3JDO2dDQUVELElBQU0sU0FBUyxHQUFpQyxRQUFRLENBQUM7Z0NBQ3pELFNBQVMsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO2dDQUU3QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsU0FBUyxDQUFDLENBQUM7NEJBQzlELENBQUMsQ0FBQyxFQUFBOzt3QkFwQkYsU0FvQkUsQ0FBQzs7Ozs7S0FDSjs7NkNBbkVFLE1BQU0sU0FBQyxTQUFTO2dEQUNoQixNQUFNLFNBQUMsc0JBQXNCLGNBQUcsUUFBUTs7O0lBVGhDLHlCQUF5QjtRQUhyQyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO1FBU0csV0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDakIsV0FBQSxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQSxFQUFFLFdBQUEsUUFBUSxFQUFFLENBQUE7T0FUbEMseUJBQXlCLENBNEVyQztvQ0F4RkQ7Q0F3RkMsQUE1RUQsSUE0RUM7U0E1RVkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiZGVjbGFyZSB2YXIgZ29vZ2xlOiBhbnk7XG5cbmltcG9ydCB7IEluamVjdGFibGUsIEV2ZW50RW1pdHRlciwgTE9DQUxFX0lELCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHb29nbGVDaGFydHNTZXR0aW5ncyB9IGZyb20gJy4vZ29vZ2xlLWNoYXJ0cy1pbnRlcmZhY2VzJztcblxuaW50ZXJmYWNlIEludGVybmFsR29vZ2xlQ2hhcnRzU2V0dGluZ3MgZXh0ZW5kcyBHb29nbGVDaGFydHNTZXR0aW5ncyB7XG4gIGNhbGxiYWNrPygpOiBhbnk7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEdvb2dsZUNoYXJ0c0xvYWRlclNlcnZpY2Uge1xuXG4gIHByaXZhdGUgZ29vZ2xlU2NyaXB0TG9hZGluZ05vdGlmaWVyOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gIHByaXZhdGUgZ29vZ2xlU2NyaXB0SXNMb2FkaW5nOiBib29sZWFuO1xuICBwcml2YXRlIGxvY2FsZUlkOiBzdHJpbmc7XG4gIHByaXZhdGUgbG9hZEdvb2dsZUNoYXJ0c1NjcmlwdFByb21pc2U6IFByb21pc2U8dm9pZD47XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoTE9DQUxFX0lEKSBsb2NhbGVJZDogc3RyaW5nLFxuICAgIEBJbmplY3QoJ2dvb2dsZUNoYXJ0c1NldHRpbmdzJykgQE9wdGlvbmFsKCkgcHJpdmF0ZSBnb29nbGVDaGFydHNTZXR0aW5ncz86IEdvb2dsZUNoYXJ0c1NldHRpbmdzLFxuICApIHtcbiAgICB0aGlzLmdvb2dsZVNjcmlwdExvYWRpbmdOb3RpZmllciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB0aGlzLmdvb2dsZVNjcmlwdElzTG9hZGluZyA9IGZhbHNlO1xuICAgIHRoaXMubG9jYWxlSWQgPSBsb2NhbGVJZDtcblxuICAgIHRoaXMubG9hZEdvb2dsZUNoYXJ0c1NjcmlwdFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGdvb2dsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ29vZ2xlLmNoYXJ0cykge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLmdvb2dsZVNjcmlwdElzTG9hZGluZykge1xuXG4gICAgICAgIHRoaXMuZ29vZ2xlU2NyaXB0SXNMb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgc2NyaXB0LnNyYyA9ICdodHRwczovL3d3dy5nc3RhdGljLmNvbS9jaGFydHMvbG9hZGVyLmpzJztcbiAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgc2NyaXB0LmRlZmVyID0gdHJ1ZTtcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdElzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuZ29vZ2xlU2NyaXB0TG9hZGluZ05vdGlmaWVyLmVtaXQodHJ1ZSk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBzY3JpcHQub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdElzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuZ29vZ2xlU2NyaXB0TG9hZGluZ05vdGlmaWVyLmVtaXQoZmFsc2UpO1xuICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICB9O1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ29vZ2xlU2NyaXB0TG9hZGluZ05vdGlmaWVyLnN1YnNjcmliZSgobG9hZGVkOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgaWYgKGxvYWRlZCkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxvYWQoc2V0dGluZ3M/OiBHb29nbGVDaGFydHNTZXR0aW5ncyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMubG9hZEdvb2dsZUNoYXJ0c1NjcmlwdFByb21pc2U7XG5cbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgaWYgKCFzZXR0aW5ncykge1xuICAgICAgICBzZXR0aW5ncyA9IE9iamVjdC5jcmVhdGUodGhpcy5nb29nbGVDaGFydHNTZXR0aW5ncyk7XG4gICAgICB9XG4gICAgICBpZiAoIXNldHRpbmdzKSB7XG4gICAgICAgIHNldHRpbmdzID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmICghc2V0dGluZ3MubGFuZ3VhZ2UpIHtcbiAgICAgICAgc2V0dGluZ3MubGFuZ3VhZ2UgPSB0aGlzLmxvY2FsZUlkO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNldHRpbmdzLmdvb2dsZUNoYXJ0c1ZlcnNpb24pIHtcbiAgICAgICAgc2V0dGluZ3MuZ29vZ2xlQ2hhcnRzVmVyc2lvbiA9ICc0Nyc7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IF9zZXR0aW5nczogSW50ZXJuYWxHb29nbGVDaGFydHNTZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgICAgX3NldHRpbmdzLmNhbGxiYWNrID0gcmVzb2x2ZTtcblxuICAgICAgZ29vZ2xlLmNoYXJ0cy5sb2FkKHNldHRpbmdzLmdvb2dsZUNoYXJ0c1ZlcnNpb24sIF9zZXR0aW5ncyk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==