import { __decorate, __values } from "tslib";
import { EventEmitter, Output, } from '@angular/core';
var GoogleChartsDataTable = /** @class */ (function () {
    function GoogleChartsDataTable(opt) {
        this.opt = opt;
        this.dataTableChanged = new EventEmitter();
        if (opt) {
            this._setDataTable(opt.dataTable, opt.firstRowIsData);
        }
    }
    GoogleChartsDataTable.prototype.send = function () {
        var _this = this;
        if (this.query === undefined) {
            return;
        }
        this.query.send(function (queryResponse) {
            _this.setDataTable(queryResponse.getDataTable());
            if (_this.opt.queryCallback) {
                _this.opt.queryCallback(queryResponse);
            }
        });
    };
    GoogleChartsDataTable.prototype.init = function (opt) {
        var _this = this;
        if (opt) {
            this.opt = opt;
        }
        if (this.tid !== undefined) {
            // doesn't work, see https://github.com/google/google-visualization-issues/issues/2381
            // this.query.abort();
            window.clearInterval(this.tid);
            this.tid = undefined;
        }
        if (this.opt.dataSourceUrl) {
            this.query = new google.visualization.Query(this.opt.dataSourceUrl);
            if (this.opt.query) {
                this.query.setQuery(this.opt.query);
            }
            if (this.opt.timeout !== undefined) {
                this.query.setTimeout(this.opt.timeout);
            }
            if (this.opt.refreshInterval) {
                // this.query.setRefreshInterval(this.opt.refreshInterval);
                this.tid = window.setInterval(function () {
                    _this.send();
                }, this.opt.refreshInterval * 1000);
            }
            this.send();
        }
        else {
            this.setDataTable(this.opt.dataTable);
        }
    };
    /**
     * @returns Underlying google.visualization.DataTable
     */
    GoogleChartsDataTable.prototype.getDataTable = function () {
        return this.dataTable;
    };
    GoogleChartsDataTable.prototype.setDataTable = function (dt, firstRowIsData) {
        if (firstRowIsData === undefined) {
            firstRowIsData = this.opt.firstRowIsData;
        }
        this._setDataTable(dt, firstRowIsData);
        this.dataTableChanged.emit(this.dataTable);
    };
    GoogleChartsDataTable.prototype._setDataTable = function (dt, firstRowIsData) {
        if (Array.isArray(dt)) {
            dt = google.visualization.arrayToDataTable(dt, firstRowIsData);
        }
        this.dataTable = dt;
        this.reformat();
    };
    /**
     * Applies formatters to data columns, if defined
     */
    GoogleChartsDataTable.prototype.reformat = function () {
        var e_1, _a, e_2, _b, e_3, _c;
        var dt = this.dataTable;
        if (dt === undefined) {
            return;
        }
        if (this.opt.formatters === undefined) {
            return;
        }
        try {
            for (var _d = __values(this.opt.formatters), _e = _d.next(); !_e.done; _e = _d.next()) {
                var formatterConfig = _e.value;
                var formatter = void 0;
                if (formatterConfig.type === 'PatternFormat') {
                    var fmtOptions = formatterConfig.options;
                    formatter = new google.visualization.PatternFormat(fmtOptions.pattern);
                    formatter.format(dt, formatterConfig.columns, fmtOptions.dstColumnIndex);
                    continue;
                }
                var formatterConstructor = google.visualization[formatterConfig.type];
                var formatterOptions = formatterConfig.options;
                formatter = new formatterConstructor(formatterOptions);
                if (formatterConfig.type === 'ColorFormat' && formatterOptions) {
                    var fmtOptions = formatterOptions;
                    try {
                        for (var _f = (e_2 = void 0, __values(fmtOptions.ranges)), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var range = _g.value;
                            if (typeof (range.fromBgColor) !== 'undefined'
                                && typeof (range.toBgColor) !== 'undefined') {
                                formatter.addGradientRange(range.from, range.to, range.color, range.fromBgColor, range.toBgColor);
                            }
                            else {
                                formatter.addRange(range.from, range.to, range.color, range.bgcolor);
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                try {
                    for (var _h = (e_3 = void 0, __values(formatterConfig.columns)), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var col = _j.value;
                        formatter.format(dt, col);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    __decorate([
        Output()
    ], GoogleChartsDataTable.prototype, "dataTableChanged", void 0);
    return GoogleChartsDataTable;
}());
export { GoogleChartsDataTable };
//# sourceMappingURL=data:application/json;base64,