import { __awaiter, __decorate } from "tslib";
import { Component, ElementRef, OnInit, Input, } from '@angular/core';
import { GoogleChartsLoaderService } from '../google-charts-loader.service';
import { GoogleChartsDataTable } from '../google-charts-datatable';
let GoogleChartsDashboardComponent = class GoogleChartsDashboardComponent {
    constructor(el, loaderService) {
        this.el = el;
        this.loaderService = loaderService;
    }
    ngOnInit() {
        this.data.component = this;
        this.init().then(() => {
            if (!this.dataTable) {
                this.dataTable = new GoogleChartsDataTable(this.data);
                this.dataTable.dataTableChanged.subscribe((dt) => {
                    this._draw();
                });
            }
            this.draw();
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loaderService.load({ packages: ['controls'] });
            this.dashboard = new google.visualization.Dashboard(this.el.nativeElement.querySelector('div'));
            for (const b of this.data.bind) {
                let controls = b[0];
                let charts = b[1];
                if (!(controls instanceof Array)) {
                    controls = [controls];
                }
                if (!(charts instanceof Array)) {
                    charts = [charts];
                }
                for (const c of controls) {
                    yield c.component.ensureInit();
                }
                for (const c of charts) {
                    yield c.component.init();
                    const data = c.component.data;
                    if (data.dataTable !== undefined || data.dataSourceUrl !== undefined) {
                        throw Error('dataTable and dataSourceUrl cannot be specified when ' +
                            'chart is drawn in a Dashboard');
                    }
                }
                this.dashboard.bind(controls.map(x => x.component.wrapper), charts.map(x => x.component.wrapper));
            }
        });
    }
    draw(value) {
        this.dataTable.init(value);
    }
    _draw() {
        this.dashboard.draw(this.dataTable.getDataTable());
    }
};
GoogleChartsDashboardComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: GoogleChartsLoaderService }
];
__decorate([
    Input()
], GoogleChartsDashboardComponent.prototype, "data", void 0);
GoogleChartsDashboardComponent = __decorate([
    Component({
        selector: 'google-charts-dashboard',
        template: '<div></div>'
    })
], GoogleChartsDashboardComponent);
export { GoogleChartsDashboardComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy1kYXNoYm9hcmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmcyLWdvb2dsZS1jaGFydHMvIiwic291cmNlcyI6WyJsaWIvZ29vZ2xlLWNoYXJ0cy1kYXNoYm9hcmQvZ29vZ2xlLWNoYXJ0cy1kYXNoYm9hcmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixNQUFNLEVBQ04sS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBSTVFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBZW5FLElBQWEsOEJBQThCLEdBQTNDLE1BQWEsOEJBQThCO0lBU3pDLFlBQW1CLEVBQWMsRUFDZCxhQUF3QztRQUN6RCxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBRTNCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQU8sRUFBRSxFQUFFO29CQUNwRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2YsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUNELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVZLElBQUk7O1lBQ2YsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFDLFFBQVEsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUV6RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQ2pELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRTlDLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQzlCLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUVsQixJQUFJLENBQUMsQ0FBQyxRQUFRLFlBQVksS0FBSyxDQUFDLEVBQUU7b0JBQ2hDLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUN2QjtnQkFFRCxJQUFJLENBQUMsQ0FBQyxNQUFNLFlBQVksS0FBSyxDQUFDLEVBQUU7b0JBQzlCLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUNuQjtnQkFFRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLFFBQVEsRUFBRTtvQkFDeEIsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO2lCQUNoQztnQkFFRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sRUFBRTtvQkFDdEIsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUN6QixNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztvQkFDOUIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLFNBQVMsRUFBRTt3QkFDcEUsTUFBTSxLQUFLLENBQUMsdURBQXVEOzRCQUN2RCwrQkFBK0IsQ0FBQyxDQUFDO3FCQUM5QztpQkFDRjtnQkFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFDdEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUMzRDtRQUNILENBQUM7S0FBQTtJQUVNLElBQUksQ0FBQyxLQUE0QjtRQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU8sS0FBSztRQUNYLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0YsQ0FBQTs7WUEvRHdCLFVBQVU7WUFDQyx5QkFBeUI7O0FBUmxEO0lBQVIsS0FBSyxFQUFFOzREQUE2QztBQUYxQyw4QkFBOEI7SUFKMUMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLHlCQUF5QjtRQUNuQyxRQUFRLEVBQUUsYUFBYTtLQUN4QixDQUFDO0dBQ1csOEJBQThCLENBd0UxQztTQXhFWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJkZWNsYXJlIHZhciBnb29nbGU6IGFueTtcblxuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBPbkluaXQsXG4gIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgR29vZ2xlQ2hhcnRzTG9hZGVyU2VydmljZSB9IGZyb20gJy4uL2dvb2dsZS1jaGFydHMtbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgR29vZ2xlQ2hhcnRzRGF0YVRhYmxlSW50ZXJmYWNlIH0gZnJvbSAnLi4vZ29vZ2xlLWNoYXJ0cy1kYXRhdGFibGUnO1xuaW1wb3J0IHsgR29vZ2xlQ2hhcnRzQ29udHJvbEludGVyZmFjZSB9IGZyb20gJy4uL2dvb2dsZS1jaGFydHMtY29udHJvbC9nb29nbGUtY2hhcnRzLWNvbnRyb2wuY29tcG9uZW50JztcbmltcG9ydCB7IEdvb2dsZUNoYXJ0SW50ZXJmYWNlIH0gZnJvbSAnLi4vZ29vZ2xlLWNoYXJ0L2dvb2dsZS1jaGFydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgR29vZ2xlQ2hhcnRzRGF0YVRhYmxlIH0gZnJvbSAnLi4vZ29vZ2xlLWNoYXJ0cy1kYXRhdGFibGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEdvb2dsZUNoYXJ0c0Rhc2hib2FyZEludGVyZmFjZSBleHRlbmRzXG4gR29vZ2xlQ2hhcnRzRGF0YVRhYmxlSW50ZXJmYWNlIHtcbiAgYmluZDogW1xuICAgIEdvb2dsZUNoYXJ0c0NvbnRyb2xJbnRlcmZhY2UgfCBHb29nbGVDaGFydHNDb250cm9sSW50ZXJmYWNlW10sXG4gICAgR29vZ2xlQ2hhcnRJbnRlcmZhY2UgfCBHb29nbGVDaGFydEludGVyZmFjZVtdXG4gIF1bXTtcbiAgY29tcG9uZW50PzogR29vZ2xlQ2hhcnRzRGFzaGJvYXJkQ29tcG9uZW50O1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdnb29nbGUtY2hhcnRzLWRhc2hib2FyZCcsXG4gIHRlbXBsYXRlOiAnPGRpdj48L2Rpdj4nLFxufSlcbmV4cG9ydCBjbGFzcyBHb29nbGVDaGFydHNEYXNoYm9hcmRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBkYXRhOiBHb29nbGVDaGFydHNEYXNoYm9hcmRJbnRlcmZhY2U7XG5cbiAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZjtcbiAgcHJpdmF0ZSBsb2FkZXJTZXJ2aWNlOiBHb29nbGVDaGFydHNMb2FkZXJTZXJ2aWNlO1xuICBwdWJsaWMgZGFzaGJvYXJkOiBhbnk7XG4gIHB1YmxpYyBkYXRhVGFibGU6IEdvb2dsZUNoYXJ0c0RhdGFUYWJsZTtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgICAgICBsb2FkZXJTZXJ2aWNlOiBHb29nbGVDaGFydHNMb2FkZXJTZXJ2aWNlKSB7XG4gICAgdGhpcy5lbCA9IGVsO1xuICAgIHRoaXMubG9hZGVyU2VydmljZSA9IGxvYWRlclNlcnZpY2U7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmRhdGEuY29tcG9uZW50ID0gdGhpcztcblxuICAgIHRoaXMuaW5pdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmRhdGFUYWJsZSkge1xuICAgICAgICB0aGlzLmRhdGFUYWJsZSA9IG5ldyBHb29nbGVDaGFydHNEYXRhVGFibGUodGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5kYXRhVGFibGUuZGF0YVRhYmxlQ2hhbmdlZC5zdWJzY3JpYmUoKGR0OiBhbnkpID0+IHtcbiAgICAgICAgICB0aGlzLl9kcmF3KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5kcmF3KCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5pdCgpIHtcbiAgICBhd2FpdCB0aGlzLmxvYWRlclNlcnZpY2UubG9hZCh7cGFja2FnZXM6IFsnY29udHJvbHMnXSB9KTtcblxuICAgIHRoaXMuZGFzaGJvYXJkID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkRhc2hib2FyZChcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdkaXYnKSk7XG5cbiAgICBmb3IgKGNvbnN0IGIgb2YgdGhpcy5kYXRhLmJpbmQpIHtcbiAgICAgIGxldCBjb250cm9scyA9IGJbMF07XG4gICAgICBsZXQgY2hhcnRzID0gYlsxXTtcblxuICAgICAgaWYgKCEoY29udHJvbHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgY29udHJvbHMgPSBbY29udHJvbHNdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIShjaGFydHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgY2hhcnRzID0gW2NoYXJ0c107XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgYyBvZiBjb250cm9scykge1xuICAgICAgICBhd2FpdCBjLmNvbXBvbmVudC5lbnN1cmVJbml0KCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgYyBvZiBjaGFydHMpIHtcbiAgICAgICAgYXdhaXQgYy5jb21wb25lbnQuaW5pdCgpO1xuICAgICAgICBjb25zdCBkYXRhID0gYy5jb21wb25lbnQuZGF0YTtcbiAgICAgICAgaWYgKGRhdGEuZGF0YVRhYmxlICE9PSB1bmRlZmluZWQgfHwgZGF0YS5kYXRhU291cmNlVXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcignZGF0YVRhYmxlIGFuZCBkYXRhU291cmNlVXJsIGNhbm5vdCBiZSBzcGVjaWZpZWQgd2hlbiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAnY2hhcnQgaXMgZHJhd24gaW4gYSBEYXNoYm9hcmQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmRhc2hib2FyZC5iaW5kKGNvbnRyb2xzLm1hcCh4ID0+IHguY29tcG9uZW50LndyYXBwZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydHMubWFwKHggPT4geC5jb21wb25lbnQud3JhcHBlcikpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBkcmF3KHZhbHVlPzogR29vZ2xlQ2hhcnRJbnRlcmZhY2UpIHtcbiAgICB0aGlzLmRhdGFUYWJsZS5pbml0KHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgX2RyYXcoKSB7XG4gICAgdGhpcy5kYXNoYm9hcmQuZHJhdyh0aGlzLmRhdGFUYWJsZS5nZXREYXRhVGFibGUoKSk7XG4gIH1cbn1cbiJdfQ==