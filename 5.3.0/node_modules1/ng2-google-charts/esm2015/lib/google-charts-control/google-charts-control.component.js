import { __awaiter, __decorate } from "tslib";
import { Component, OnInit, Input, ElementRef } from '@angular/core';
import { GoogleChartsLoaderService } from '../google-charts-loader.service';
let GoogleChartsControlComponent = class GoogleChartsControlComponent {
    constructor(el, loaderService) {
        this.el = el;
        this.loaderService = loaderService;
    }
    ngOnInit() {
        this.data.component = this;
    }
    ensureInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.wrapper) {
                return;
            }
            yield this.loaderService.load({ packages: ['controls'] });
            let opt;
            opt = Object.create(this.data);
            opt.containerId = this.el.nativeElement.querySelector('div');
            this.wrapper = new google.visualization.ControlWrapper(opt);
        });
    }
};
GoogleChartsControlComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: GoogleChartsLoaderService }
];
__decorate([
    Input()
], GoogleChartsControlComponent.prototype, "data", void 0);
GoogleChartsControlComponent = __decorate([
    Component({
        selector: 'google-charts-control',
        template: '<div></div>'
    })
], GoogleChartsControlComponent);
export { GoogleChartsControlComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy1jb250cm9sLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nMi1nb29nbGUtY2hhcnRzLyIsInNvdXJjZXMiOlsibGliL2dvb2dsZS1jaGFydHMtY29udHJvbC9nb29nbGUtY2hhcnRzLWNvbnRyb2wuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFTQSxPQUFPLEVBQ0wsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQ3hCLFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQVM1RSxJQUFhLDRCQUE0QixHQUF6QyxNQUFhLDRCQUE0QjtJQVF2QyxZQUFtQixFQUFjLEVBQ2QsYUFBd0M7UUFDekQsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUNyQyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUM3QixDQUFDO0lBRVksVUFBVTs7WUFDckIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNoQixPQUFPO2FBQ1I7WUFDRCxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pELElBQUksR0FBdUMsQ0FBQztZQUM1QyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlELENBQUM7S0FBQTtDQUNGLENBQUE7O1lBcEJ3QixVQUFVO1lBQ0MseUJBQXlCOztBQVBsRDtJQUFSLEtBQUssRUFBRTswREFBMkM7QUFGeEMsNEJBQTRCO0lBSnhDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSx1QkFBdUI7UUFDakMsUUFBUSxFQUFFLGFBQWE7S0FDeEIsQ0FBQztHQUNXLDRCQUE0QixDQTRCeEM7U0E1QlksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiZGVjbGFyZSB2YXIgZ29vZ2xlOiBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR29vZ2xlQ2hhcnRzQ29udHJvbEludGVyZmFjZSB7XG4gIGNvbnRyb2xUeXBlOiBzdHJpbmc7XG4gIG9wdGlvbnM/OiBvYmplY3Q7XG4gIHN0YXRlPzogb2JqZWN0O1xuICBjb21wb25lbnQ/OiBHb29nbGVDaGFydHNDb250cm9sQ29tcG9uZW50O1xufVxuXG5pbXBvcnQge1xuICBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsXG4gIEVsZW1lbnRSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEdvb2dsZUNoYXJ0c0xvYWRlclNlcnZpY2UgfSBmcm9tICcuLi9nb29nbGUtY2hhcnRzLWxvYWRlci5zZXJ2aWNlJztcblxuaW50ZXJmYWNlIEludGVybmFsR29vZ2xlQ2hhcnRzQ29udHJvbE9wdGlvbnMgZXh0ZW5kcyBHb29nbGVDaGFydHNDb250cm9sSW50ZXJmYWNlIHtcbiAgY29udGFpbmVySWQ6IHN0cmluZztcbn1cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2dvb2dsZS1jaGFydHMtY29udHJvbCcsXG4gIHRlbXBsYXRlOiAnPGRpdj48L2Rpdj4nLFxufSlcbmV4cG9ydCBjbGFzcyBHb29nbGVDaGFydHNDb250cm9sQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSBwdWJsaWMgZGF0YTogR29vZ2xlQ2hhcnRzQ29udHJvbEludGVyZmFjZTtcblxuICBwcml2YXRlIGVsOiBFbGVtZW50UmVmO1xuICBwcml2YXRlIGxvYWRlclNlcnZpY2U6IEdvb2dsZUNoYXJ0c0xvYWRlclNlcnZpY2U7XG4gIHB1YmxpYyB3cmFwcGVyOiBhbnk7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgICAgICAgbG9hZGVyU2VydmljZTogR29vZ2xlQ2hhcnRzTG9hZGVyU2VydmljZSkge1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICB0aGlzLmxvYWRlclNlcnZpY2UgPSBsb2FkZXJTZXJ2aWNlO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5kYXRhLmNvbXBvbmVudCA9IHRoaXM7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZW5zdXJlSW5pdCgpIHtcbiAgICBpZiAodGhpcy53cmFwcGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGF3YWl0IHRoaXMubG9hZGVyU2VydmljZS5sb2FkKHtwYWNrYWdlczogWydjb250cm9scyddIH0pO1xuICAgIGxldCBvcHQ6IEludGVybmFsR29vZ2xlQ2hhcnRzQ29udHJvbE9wdGlvbnM7XG4gICAgb3B0ID0gT2JqZWN0LmNyZWF0ZSh0aGlzLmRhdGEpO1xuICAgIG9wdC5jb250YWluZXJJZCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdkaXYnKTtcbiAgICB0aGlzLndyYXBwZXIgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ29udHJvbFdyYXBwZXIob3B0KTtcbiAgfVxufVxuIl19